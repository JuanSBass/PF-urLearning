{"version":3,"sources":["../../src/utils/actions.js"],"names":["wrapInDispatch","dispatch","meta","method","args","types","requestingType","successType","errorType","type","payload","then","catch","err","Promise","reject","createWithFirebaseAndDispatch","firebase","dispatchFirst","func","apply","mapWithFirebaseAndDispatch","actions","reverseActions","withFirebaseAndDispatch","withDispatchAndFirebase"],"mappings":"olGAaO,QAASA,CAAAA,cAAT,CAAwBC,QAAxB,MAAsE,IAAlCC,CAAAA,IAAkC,MAAlCA,IAAkC,CAA5BC,MAA4B,MAA5BA,MAA4B,gBAApBC,IAAoB,CAApBA,IAAoB,oBAAb,EAAa,WAATC,KAAS,MAATA,KAAS,uBAC1BA,KAD0B,IACpEC,cADoE,WACpDC,WADoD,WACvCC,SADuC,WAO3E,MALAP,CAAAA,QAAQ,CAAC,CACPQ,IAAI,CAAE,uBAASH,cAAT,EAA2BA,cAAc,CAACG,IAA1C,CAAiDH,cADhD,CAEPJ,IAAI,CAAJA,IAFO,CAGPQ,OAAO,CAAE,uBAASJ,cAAT,EAA2BA,cAAc,CAACI,OAA1C,CAAoD,CAAEN,IAAI,CAAJA,IAAF,CAHtD,CAAD,CAKR,CAAOD,MAAM,MAAN,2BAAUC,IAAV,GACJO,IADI,CACC,SAACD,OAAD,CAAa,CAMjB,MALAT,CAAAA,QAAQ,CAAC,CACPQ,IAAI,CAAE,uBAASF,WAAT,EAAwBA,WAAW,CAACE,IAApC,CAA2CF,WAD1C,CAEPL,IAAI,CAAJA,IAFO,CAGPQ,OAAO,CAAE,uBAASH,WAAT,EAAwBA,WAAW,CAACG,OAApC,CAA8CA,OAHhD,CAAD,CAKR,CAAOA,OACR,CARI,EASJE,KATI,CASE,SAACC,GAAD,CAAS,CAMd,MALAZ,CAAAA,QAAQ,CAAC,CACPQ,IAAI,CAAED,SADC,CAEPN,IAAI,CAAJA,IAFO,CAGPQ,OAAO,CAAEG,GAHF,CAAD,CAKR,CAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CACR,CAhBI,CAiBR,CAWD,QAASG,CAAAA,6BAAT,CAAuCC,QAAvC,CAAiDhB,QAAjD,CAA2DiB,aAA3D,CAA0E,CACxE,MAAO,UAACC,IAAD,QAAU,0CAAIf,IAAJ,qCAAIA,IAAJ,6BACfe,CAAAA,IAAI,CAACC,KAAL,CACEH,QADF,CAEEC,aAAa,EACRjB,QADQ,CACEgB,QADF,SACeb,IADf,GAERa,QAFQ,CAEEhB,QAFF,SAEeG,IAFf,CAFf,CADe,CAAV,CAOR,CAUM,QAASiB,CAAAA,0BAAT,CACLJ,QADK,CAELhB,QAFK,CAGLqB,OAHK,CAILC,cAJK,CAKL,IACMC,CAAAA,uBAAuB,CAAGR,6BAA6B,CAC3DC,QAD2D,CAE3DhB,QAF2D,CAD7D,CAKMwB,uBAAuB,CAAGT,6BAA6B,CAC3DC,QAD2D,CAE3DhB,QAF2D,IAL7D,CAUA,sCACK,wBAAUqB,OAAV,CAAmBE,uBAAnB,CADL,EAEK,wBAAUD,cAAV,CAA0BE,uBAA1B,CAFL,CAID","sourcesContent":["import { isObject, mapValues } from 'lodash'\n\n/**\n * Wrap method call in dispatched actions\n * @param {Function} dispatch - Action dispatch function\n * @param {object} opts - Options object\n * @param {Function} opts.method - Method to call\n * @param {Array} opts.args - Arguments to call method with\n * @param {Array} opts.types - Action types array ([BEFORE, SUCCESS, FAILURE])\n * @param {object} opts.meta - Meta object\n * @returns {Promise} Resolves after method is called and success action is dispatched\n * @private\n */\nexport function wrapInDispatch(dispatch, { meta, method, args = [], types }) {\n  const [requestingType, successType, errorType] = types\n  dispatch({\n    type: isObject(requestingType) ? requestingType.type : requestingType,\n    meta,\n    payload: isObject(requestingType) ? requestingType.payload : { args }\n  })\n  return method(...args)\n    .then((payload) => {\n      dispatch({\n        type: isObject(successType) ? successType.type : successType,\n        meta,\n        payload: isObject(successType) ? successType.payload : payload\n      })\n      return payload\n    })\n    .catch((err) => {\n      dispatch({\n        type: errorType,\n        meta,\n        payload: err\n      })\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Function that builds a factory that passes firebase and\n * dispatch as first two arguments.\n * @param {object} firebase - Internal firebase instance\n * @param {Function} dispatch - Redux's dispatch function\n * @param {boolean} dispatchFirst - Whether or not to have dispatch argument first\n * @returns {Function} A wrapper that accepts a function to wrap with firebase\n * and dispatch.\n */\nfunction createWithFirebaseAndDispatch(firebase, dispatch, dispatchFirst) {\n  return (func) => (...args) =>\n    func.apply(\n      firebase,\n      dispatchFirst\n        ? [dispatch, firebase, ...args]\n        : [firebase, dispatch, ...args]\n    )\n}\n\n/**\n * Map each action with Firebase and Dispatch. Includes aliasing of actions.\n * @param {object} firebase - Internal firebase instance\n * @param {Function} dispatch - Redux's dispatch function\n * @param {object} actions - Action functions to map with firebase and dispatch\n * @param {object} reverseActions - Action functions to map with dispatch and firebase (i.e. reverse arg order)\n * @returns {object} Actions mapped with firebase and dispatch\n */\nexport function mapWithFirebaseAndDispatch(\n  firebase,\n  dispatch,\n  actions,\n  reverseActions\n) {\n  const withFirebaseAndDispatch = createWithFirebaseAndDispatch(\n    firebase,\n    dispatch\n  )\n  const withDispatchAndFirebase = createWithFirebaseAndDispatch(\n    firebase,\n    dispatch,\n    true\n  )\n  return {\n    ...mapValues(actions, withFirebaseAndDispatch),\n    ...mapValues(reverseActions, withDispatchAndFirebase)\n  }\n}\n"],"file":"actions.js"}