{"version":3,"sources":["../../src/utils/auth.js"],"names":["createAuthProvider","firebase","providerName","scopes","lowerCaseProviderName","toLowerCase","provider","auth","OAuthProvider","capitalProviderName","Error","customAuthParameters","_","config","setCustomParameters","addScope","Array","isArray","forEach","scope","String","getLoginMethodAndParams","credentials","email","password","type","token","phoneNumber","applicationVerifier","credential","emailLink","credentialAuth","signInAndRetrieveDataWithCredential","method","params","indexOf","authProvider","tokenAuth","signInAndRetrieveDataWithCustomToken","signInWithEmailAndPassword","getReauthenticateMethodAndParams","reauthenticateAndRetrieveDataWithCredential","isAuthReady","store","stateName","state","getState","firebaseState","firebaseAuthState","isLoaded","authIsReady","Promise","resolve","unsubscribe","subscribe","createAuthIsReady","firebaseStateName","updateProfileOnRTDB","profileUpdate","authUid","profileRef","database","ref","userProfile","update","then","once","updateProfileOnFirestore","options","useSet","merge","firestore","doc","profileUpdatePromise","set","get","setupPresence","dispatch","ServerValue","presence","sessions","amOnline","child","onlineRef","currentUser","sessionsRef","on","snapShot","val","actionTypes","SESSION_START","payload","session","push","startedAt","TIMESTAMP","user","setPriority","onDisconnect","SESSION_END","remove"],"mappings":"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","sourcesContent":["import { capitalize } from 'lodash'\nimport { supportedAuthProviders, actionTypes } from '../constants'\n\n/**\n * @description Get correct login method and params order based on provided credentials\n * @param {object} firebase - Internal firebase object\n * @param {string} providerName - Name of Auth Provider (i.e. google, github, facebook, twitter)\n * @param {Array|string} scopes - List of scopes to add to auth provider\n * @returns {firebase.auth.AuthCredential} provider - Auth Provider\n * @private\n */\nfunction createAuthProvider(firebase, providerName, scopes) {\n  // TODO: Verify scopes are valid before adding\n  // TODO: Validate parameter inputs\n\n  const lowerCaseProviderName = providerName.toLowerCase()\n\n  if (\n    lowerCaseProviderName === 'microsoft.com' ||\n    lowerCaseProviderName === 'apple.com' ||\n    lowerCaseProviderName === 'yahoo.com'\n  ) {\n    const provider = new firebase.auth.OAuthProvider(providerName)\n    return provider\n  }\n\n  const capitalProviderName = `${capitalize(providerName)}AuthProvider`\n\n  // Throw if auth provider does not exist on Firebase instance\n  if (!firebase.auth[capitalProviderName]) {\n    throw new Error(\n      `${providerName} is not a valid auth provider for your firebase instance. If using react-native, use a RN specific auth library.`\n    )\n  }\n\n  const provider = new firebase.auth[capitalProviderName]()\n\n  // Custom Auth Parameters\n  // TODO: Validate parameter inputs\n  const { customAuthParameters } = firebase._.config\n  if (customAuthParameters && customAuthParameters[providerName]) {\n    provider.setCustomParameters(customAuthParameters[providerName])\n  }\n\n  // Handle providers without scopes\n  if (\n    lowerCaseProviderName === 'twitter' ||\n    typeof provider.addScope !== 'function'\n  ) {\n    return provider\n  }\n\n  // TODO: Verify scopes are valid before adding\n  provider.addScope('email')\n\n  if (scopes) {\n    if (Array.isArray(scopes)) {\n      scopes.forEach((scope) => {\n        provider.addScope(scope)\n      })\n    }\n    // Add single scope if it is a string\n    if (typeof scopes === 'string' || scopes instanceof String) {\n      provider.addScope(scopes)\n    }\n  }\n\n  return provider\n}\n\n/**\n * Get correct login method and params order based on provided\n * credentials\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.email - Email to login with (only needed for\n * email login)\n * @param {string} credentials.password - Password to login with (only needed\n * for email login)\n * @param {string} credentials.provider - Provider name such as google, twitter\n * (only needed for 3rd party provider login)\n * @param {string} credentials.type - Popup or redirect (only needed for 3rd\n * party provider login)\n * @param {string} credentials.token - Custom or provider token\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or\n * provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider\n * (i.e. email)\n * @returns {object} Method and params for calling login\n * @private\n */\nexport function getLoginMethodAndParams(firebase, credentials) {\n  const {\n    email,\n    password,\n    provider,\n    type,\n    token,\n    scopes,\n    phoneNumber,\n    applicationVerifier,\n    credential,\n    emailLink\n  } = credentials\n  // Credential Auth\n  if (credential) {\n    // Attempt to use signInAndRetrieveDataWithCredential if it exists (see #467 for more info)\n    const credentialAuth = firebase.auth().signInAndRetrieveDataWithCredential\n\n    if (credentialAuth) {\n      return {\n        method: 'signInAndRetrieveDataWithCredential',\n        params: [credential]\n      }\n    }\n    return { method: 'signInWithCredential', params: [credential] }\n  }\n\n  // Provider Auth\n  if (provider) {\n    // Verify providerName is valid\n    if (supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {\n      throw new Error(`${provider} is not a valid Auth Provider`)\n    }\n    if (token) {\n      throw new Error(\n        'provider with token no longer supported, use credential parameter instead'\n      )\n    }\n    const authProvider = createAuthProvider(firebase, provider, scopes)\n    if (type === 'popup') {\n      return { method: 'signInWithPopup', params: [authProvider] }\n    }\n    return { method: 'signInWithRedirect', params: [authProvider] }\n  }\n\n  // Token Auth\n  if (token) {\n    // Check for new sign in method (see #484 for more info)\n    const tokenAuth = firebase.auth().signInAndRetrieveDataWithCustomToken\n\n    if (tokenAuth) {\n      return { method: 'signInAndRetrieveDataWithCustomToken', params: [token] }\n    }\n\n    return { method: 'signInWithCustomToken', params: [token] }\n  }\n\n  // Phone Number Auth\n  if (phoneNumber) {\n    if (!applicationVerifier) {\n      throw new Error(\n        'Application verifier is required for phone authentication'\n      )\n    }\n    return {\n      method: 'signInWithPhoneNumber',\n      params: [phoneNumber, applicationVerifier]\n    }\n  }\n\n  // Passwordless sign-in\n  if (emailLink && email) {\n    return { method: 'signInWithEmailLink', params: [email, emailLink] }\n  }\n\n  // Check for new sign in method (see #484 for more info)\n  // Note: usage of signInAndRetrieveDataWithEmailAndPassword is now a fallback since it is deprecated (see #484 for more info)\n  if (!firebase.auth().signInWithEmailAndPassword) {\n    return {\n      method: 'signInAndRetrieveDataWithEmailAndPassword',\n      params: [email, password]\n    }\n  }\n\n  // Email/Password Auth\n  return { method: 'signInWithEmailAndPassword', params: [email, password] }\n}\n\n/**\n * Get correct reauthenticate method and params order based on provided\n * credentials\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.provider - Provider name such as google, twitter\n * (only needed for 3rd party provider login)\n * @param {string} credentials.type - Popup or redirect (only needed for 3rd\n * party provider login)\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or\n * provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider\n * (i.e. email)\n * @returns {object} Method and params for calling login\n * @private\n */\nexport function getReauthenticateMethodAndParams(firebase, credentials) {\n  const {\n    provider,\n    type,\n    scopes,\n    phoneNumber,\n    applicationVerifier,\n    credential\n  } = credentials\n  // Credential Auth\n  if (credential) {\n    // Attempt to use signInAndRetrieveDataWithCredential if it exists (see #467 for more info)\n    const credentialAuth = firebase.auth()\n      .reauthenticateAndRetrieveDataWithCredential\n\n    if (credentialAuth) {\n      return {\n        method: 'reauthenticateAndRetrieveDataWithCredential',\n        params: [credential]\n      }\n    }\n    return { method: 'reauthenticateWithCredential', params: [credential] }\n  }\n\n  // Provider Auth\n  if (provider) {\n    // Verify providerName is valid\n    if (supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {\n      throw new Error(`${provider} is not a valid Auth Provider`)\n    }\n    const authProvider = createAuthProvider(firebase, provider, scopes)\n    if (type === 'popup') {\n      return { method: 'reauthenticateWithPopup', params: [authProvider] }\n    }\n    return { method: 'reauthenticateWithRedirect', params: [authProvider] }\n  }\n\n  // Phone Number Auth\n  if (!applicationVerifier) {\n    throw new Error('Application verifier is required for phone authentication')\n  }\n  return {\n    method: 'reauthenticateWithPhoneNumber',\n    params: [phoneNumber, applicationVerifier]\n  }\n}\n\n/**\n * Returns a promise that completes when Firebase Auth is ready in the given\n * store using react-redux-firebase.\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {string} [stateName='firebase'] - The attribute name of the\n * react-redux-firebase reducer when using multiple combined reducers.\n * 'firebase' by default. Set this to `null` to indicate that the\n * react-redux-firebase reducer is not in a combined reducer.\n * @returns {Promise} Resolves when Firebase auth is ready in the store.\n */\nfunction isAuthReady(store, stateName) {\n  const state = store.getState()\n  const firebaseState = stateName ? state[stateName] : state\n  const firebaseAuthState = firebaseState && firebaseState.auth\n  if (!firebaseAuthState) {\n    throw new Error(\n      `The Firebase auth state could not be found in the store under the attribute '${\n        stateName ? `${stateName}.` : ''\n      }auth'. Make sure your react-redux-firebase reducer is correctly set in the store`\n    )\n  }\n  return firebaseState.auth.isLoaded\n}\n\n/**\n * Returns a promise that completes when Firebase Auth is ready in the given\n * store using react-redux-firebase.\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {string} [stateName='firebase'] - The attribute name of the react-redux-firebase\n * reducer when using multiple combined reducers. 'firebase' by default. Set\n * this to `null` to indicate that the react-redux-firebase reducer is not in a\n * combined reducer.\n * @returns {Promise} Resolve when Firebase auth is ready in the store.\n */\nexport function authIsReady(store, stateName = 'firebase') {\n  return new Promise((resolve) => {\n    if (isAuthReady(store, stateName)) {\n      resolve()\n    } else {\n      const unsubscribe = store.subscribe(() => {\n        if (isAuthReady(store, stateName)) {\n          unsubscribe()\n          resolve()\n        }\n      })\n    }\n  })\n}\n\n/**\n * Function that creates and authIsReady promise\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {object} config - Config options for authIsReady\n * @param {string} config.authIsReady - Config options for authIsReady\n * @param {string} config.firebaseStateName - Config options for authIsReady\n * @returns {Promise} Resolves when Firebase auth is ready in the store.\n */\nexport function createAuthIsReady(store, config) {\n  return typeof config.authIsReady === 'function'\n    ? config.authIsReady(store, config)\n    : authIsReady(store, config.firebaseStateName)\n}\n\n/**\n * Update profile data on Firebase Real Time Database\n * @param {object} firebase - internal firebase object\n * @param {object} profileUpdate - Updates to profile object\n * @returns {Promise} Resolves with results of profile get\n */\nexport function updateProfileOnRTDB(firebase, profileUpdate) {\n  const {\n    _: { config, authUid }\n  } = firebase\n  const profileRef = firebase.database().ref(`${config.userProfile}/${authUid}`)\n  return profileRef.update(profileUpdate).then(() => profileRef.once('value'))\n}\n\n/**\n * Update profile data on Firestore by calling set (with merge: true) on\n * the profile.\n * @param {object} firebase - internal firebase object\n * @param {object} profileUpdate - Updates to profile object\n * @param {object} options - Options object for configuring how profile\n * update occurs\n * @param {boolean} [options.useSet=true] - Use set with merge instead of\n * update. Setting to `false` uses update (can cause issue if profile document\n * does not exist).\n * @param {boolean} [options.merge=true] - Whether or not to use merge when\n * setting profile\n * @returns {Promise} Resolves with results of profile get\n */\nexport function updateProfileOnFirestore(\n  firebase,\n  profileUpdate,\n  options = {}\n) {\n  const { useSet = true, merge = true } = options\n  const {\n    firestore,\n    _: { config, authUid }\n  } = firebase\n  const profileRef = firestore().doc(`${config.userProfile}/${authUid}`)\n  // Use set with merge (to prevent \"No document to update\") unless otherwise\n  // specificed through options\n  const profileUpdatePromise = useSet\n    ? profileRef.set(profileUpdate, { merge })\n    : profileRef.update(profileUpdate)\n  return profileUpdatePromise.then(() => profileRef.get())\n}\n\n/**\n * Start presence management for a specificed user uid.\n * Presence collection contains a list of users that are online currently.\n * Sessions collection contains a record of all user sessions.\n * This function is called within login functions if enablePresence: true.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport function setupPresence(dispatch, firebase) {\n  // exit if database does not exist on firebase instance\n  if (!firebase.database || !firebase.database.ServerValue) {\n    return\n  }\n  const ref = firebase.database().ref()\n  const {\n    config: { presence, sessions },\n    authUid\n  } = firebase._\n  const amOnline = ref.child('.info/connected')\n  const onlineRef = ref\n    .child(\n      typeof presence === 'function'\n        ? presence(firebase.auth().currentUser, firebase)\n        : presence\n    )\n    .child(authUid)\n  let sessionsRef =\n    typeof sessions === 'function'\n      ? sessions(firebase.auth().currentUser, firebase)\n      : sessions\n  if (sessionsRef) {\n    sessionsRef = ref.child(sessions)\n  }\n  amOnline.on('value', (snapShot) => {\n    if (!snapShot.val()) return\n    // user is online\n    if (sessionsRef) {\n      // add session and set disconnect\n      dispatch({ type: actionTypes.SESSION_START, payload: authUid })\n      // add new session to sessions collection\n      const session = sessionsRef.push({\n        startedAt: firebase.database.ServerValue.TIMESTAMP,\n        user: authUid\n      })\n      // Support versions of react-native-firebase that do not have setPriority\n      // on firebase.database.ThenableReference\n      if (typeof session.setPriority === 'function') {\n        // set authUid as priority for easy sorting\n        session.setPriority(authUid)\n      }\n      session\n        .child('endedAt')\n        .onDisconnect()\n        .set(firebase.database.ServerValue.TIMESTAMP, () => {\n          dispatch({ type: actionTypes.SESSION_END })\n        })\n    }\n    // add correct session id to user\n    // remove from presence list\n    onlineRef.set(true)\n    onlineRef.onDisconnect().remove()\n  })\n}\n"],"file":"auth.js"}